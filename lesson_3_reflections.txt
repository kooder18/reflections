Q: When would you want to use a remote repository rather than keeping all your work local?

A: You would do this when you have a large number of collaborators all working on the same project.
Everyone would be pushing code onto a central repository that you could then pull down from to stay up
to date on the project.


Q: Why might you want to pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

A: One reason would be if you have several people all working together
on the same project and the other team is adding a feature that is seperate
from the main project, and you are not ready to incorporate that feature
into your local git repository. As you need to test the feature that you are
working on.


Q: Describe the differences between forks, clones, and branches. When would
you use one instead of another?


A: The difference between a clone, and a fork is that a clone is a carbon copy
that is on your local machine or a new repository. Whereas a fork is a copy that
points back to the original. This makes it easier to incorporate desired changes
that may have been introduced to the fork that were not present in the original.
A branch differs from the other two, by have a new set of git logs, usually you
make a branch when you want to add a new feature or logical change, that is not
part of the main program.

Q: What is the benefit of having a copy of the last known state of the remote
stored locally?

A: It allows the user to have access to the last known state, and makes it easier
to manage merge conflicts, and fast-forward merging.


Q: How would you collaborate without using Git or GitHub? What would be easier,
and what would be harder?


A: The best way to collaborate without git, would be using a cloud storage system
like drop box. To keep every member of the team in sync while working on a project.
It would be much harder however to see a history of commits and changes, and
then to go back to an earlier commit in the case of a program error.


Q: When would you want to make changes in a separate branch rather than directly
in master? What benefits does each approach have?

A: You would want to make changes in a separate branch when you are working on
code that is not production ready. Or are building an experimental feature that
the code may break the main program. And then after the feature or code is
production ready, you can merge it into the master branch.

  The benefits of this approach is that your code is compartmentalized and makes
it easier to share new features with others.
